[{"path":"https://lukakoning.github.io/fabricQueryR/LICENSE.html","id":null,"dir":"","previous_headings":"","what":"MIT License","title":"MIT License","text":"Copyright (c) 2025 fabricQueryR authors Permission hereby granted, free charge, person obtaining copy software associated documentation files (“Software”), deal Software without restriction, including without limitation rights use, copy, modify, merge, publish, distribute, sublicense, /sell copies Software, permit persons Software furnished , subject following conditions: copyright notice permission notice shall included copies substantial portions Software. SOFTWARE PROVIDED “”, WITHOUT WARRANTY KIND, EXPRESS IMPLIED, INCLUDING LIMITED WARRANTIES MERCHANTABILITY, FITNESS PARTICULAR PURPOSE NONINFRINGEMENT. EVENT SHALL AUTHORS COPYRIGHT HOLDERS LIABLE CLAIM, DAMAGES LIABILITY, WHETHER ACTION CONTRACT, TORT OTHERWISE, ARISING , CONNECTION SOFTWARE USE DEALINGS SOFTWARE.","code":""},{"path":"https://lukakoning.github.io/fabricQueryR/authors.html","id":null,"dir":"","previous_headings":"","what":"Authors","title":"Authors and Citation","text":"Luka Koning. Author, maintainer, copyright holder. Kennispunt Twente. Funder.","code":""},{"path":"https://lukakoning.github.io/fabricQueryR/authors.html","id":"citation","dir":"","previous_headings":"","what":"Citation","title":"Authors and Citation","text":"Koning L (2025). fabricQueryR: Query Data 'Microsoft Fabric'. R package version 0.1.0, https://github.com/kennispunttwente/fabricQueryR.","code":"@Manual{,   title = {fabricQueryR: Query Data in 'Microsoft Fabric'},   author = {Luka Koning},   year = {2025},   note = {R package version 0.1.0},   url = {https://github.com/kennispunttwente/fabricQueryR}, }"},{"path":"https://lukakoning.github.io/fabricQueryR/index.html","id":"fabricqueryr","dir":"","previous_headings":"","what":"Query Data in Microsoft Fabric","title":"Query Data in Microsoft Fabric","text":"‘fabricQueryR’ R package helps query data Microsoft Fabric R. comes three methods help get Microsoft Fabric data R: Create connection SQL endpoint (e.g., Lakehouse Data Warehouse item): fabric_sql_connect(). results ‘DBI’ connection object can execute SQL queries , /use ‘DBI’-compatible packages like ‘dbplyr’, ‘odbc’, et cetera. Execute DAX query Fabric/Power Bi Semantic Model item: fabric_pbi_dax_query(). , can run DAX queries Fabric/Power Bi dataset get results ‘tibble’ dataframe. Read Delta table Fabric Lakehouse item: fabric_onelake_read_delta_table(). function downloads underlying Parquet files Delta table stored OneLake (ADLS Gen2) returns data ‘tibble’ dataframe.","code":""},{"path":"https://lukakoning.github.io/fabricQueryR/index.html","id":"installation","dir":"","previous_headings":"","what":"Installation","title":"Query Data in Microsoft Fabric","text":"can install development version ‘fabricQueryR’ like : , install latest version CRAN (available):","code":"if (!requireNamespace(\"remotes\", quietly = TRUE)) {   install.packages(\"remotes\") }  remotes::install_github(\"kennispunttwente/fabricQueryR\") install.packages(\"fabricQueryR\")"},{"path":"https://lukakoning.github.io/fabricQueryR/index.html","id":"usage","dir":"","previous_headings":"","what":"Usage","title":"Query Data in Microsoft Fabric","text":"See reference full documentation functions. code snippet showing use three methods get data Fabric R:","code":"# First find your 'tenant' ID & 'client' ID (app registration) in Azure/Entra # You may be able to use the default Azure CLI app id; #   this will be automatically used if you do not set 'FABRICQUERYR_CLIENT_ID' # The AzureAuth package is used to acquire tokens; you may be redirected #   to a browser window to sign in the first time  # Sys.setenv(FABRICQUERYR_TENANT_ID = \"...\") # Sys.setenv(FABRICQUERYR_CLIENT_ID = \"...\")  # SQL connection to Data Warehouse or Lakehouse --------------------------------  # Find your SQL connection string in Fabric by going to a Lakehouse or Data #   Warehouse item; then Settings -> SQL analytics endpoint # Ensure that the account/principal you authenticate with has access to #   the workspace   # Get connection con <- fabric_sql_connect(   server = \"2gxz...4qiy.datawarehouse.fabric.microsoft.com\" )  # List databases DBI::dbGetQuery(con, \"SELECT name FROM sys.databases\")  # List tables in the current database DBI::dbGetQuery(   con,   \"   SELECT TABLE_SCHEMA, TABLE_NAME   FROM INFORMATION_SCHEMA.TABLES   WHERE TABLE_TYPE = 'BASE TABLE'   \" )  # Read 'Customers' table df_sql <- DBI::dbReadTable(con, \"Customers\")  # Close connection DBI::dbDisconnect(con)   # Table from Lakehouse via OneLake data access ---------------------------------  # Ensure that the account/principal you authenticate with has access via #   being part of the workspace, or via Lakehouse -> Manage OneLake data access  df_onelake <- fabric_onelake_read_delta_table(   table_path = \"Customers\",   workspace_name = \"ExampleWorkspace\",   lakehouse_name = \"Lakehouse.Lakehouse\", )   # DAX query against Semantic Model ---------------------------------------------  # Ensure that the account you use to authenticate has access to the workspace, #   or that you have been granted 'Build' permissions on the dataset (via share)  df_dax <- fabric_pbi_dax_query(   connstr = paste0(     \"Data Source=powerbi://api.powerbi.com/v1.0/myorg/\",     \"ExampleWorkspace;Initial Catalog=test data 1;\"   ),   dax = \"EVALUATE TOPN(100000, 'Sheet1')\" )"},{"path":"https://lukakoning.github.io/fabricQueryR/index.html","id":"background","dir":"","previous_headings":"","what":"Background","title":"Query Data in Microsoft Fabric","text":"Microsoft Fabric new data platform Microsoft combines various data services, including data warehousing, data lakes, business intelligence. built top Azure Data Services integrates Power BI analytics reporting. Microsoft actively promoting Fabric next-generation data platform organizations using Microsoft Azure Power BI. organization started working Microsoft Fabric, found loading data R Fabric yet straightforward, took effort get working. help others situation, decided share functions created make easier.","code":""},{"path":"https://lukakoning.github.io/fabricQueryR/reference/fabricQueryR-package.html","id":null,"dir":"Reference","previous_headings":"","what":"fabricQueryR: Query Data in 'Microsoft Fabric' — fabricQueryR-package","title":"fabricQueryR: Query Data in 'Microsoft Fabric' — fabricQueryR-package","text":"Query data hosted 'Microsoft Fabric'. Provides helpers open 'DBI' connections SQL endpoints 'Lakehouse' 'Data Warehouse' items; submit 'Data Analysis Expressions' ('DAX') queries semantic model datasets 'Microsoft Fabric' 'Power BI'; read 'Delta Lake' tables stored 'OneLake' ('Azure Data Lake Storage Gen2').","code":""},{"path":[]},{"path":"https://lukakoning.github.io/fabricQueryR/reference/fabricQueryR-package.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"fabricQueryR: Query Data in 'Microsoft Fabric' — fabricQueryR-package","text":"Maintainer: Luka Koning l.koning@kennispunttwente.nl [copyright holder] contributors: Kennispunt Twente info@kennispunttwente.nl [funder]","code":""},{"path":"https://lukakoning.github.io/fabricQueryR/reference/fabric_onelake_read_delta_table.html","id":null,"dir":"Reference","previous_headings":"","what":"Read a Microsoft Fabric/OneLake Delta table (ADLS Gen2) — fabric_onelake_read_delta_table","title":"Read a Microsoft Fabric/OneLake Delta table (ADLS Gen2) — fabric_onelake_read_delta_table","text":"Authenticates OneLake (ADLS Gen2), resolves table's _delta_log determine current active Parquet parts, downloads parts local staging directory, returns result tibble.","code":""},{"path":"https://lukakoning.github.io/fabricQueryR/reference/fabric_onelake_read_delta_table.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Read a Microsoft Fabric/OneLake Delta table (ADLS Gen2) — fabric_onelake_read_delta_table","text":"","code":"fabric_onelake_read_delta_table(   table_path,   workspace_name,   lakehouse_name,   tenant_id = Sys.getenv(\"FABRICQUERYR_TENANT_ID\"),   client_id = Sys.getenv(\"FABRICQUERYR_CLIENT_ID\", unset =     \"04b07795-8ddb-461a-bbee-02f9e1bf7b46\"),   dest_dir = NULL,   verbose = TRUE,   dfs_base = \"https://onelake.dfs.fabric.microsoft.com\" )"},{"path":"https://lukakoning.github.io/fabricQueryR/reference/fabric_onelake_read_delta_table.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Read a Microsoft Fabric/OneLake Delta table (ADLS Gen2) — fabric_onelake_read_delta_table","text":"table_path Character. Table name nested path (e.g. \"Patienten\" \"Patienten/patienten_hash\"). last path segment used table directory Tables/. workspace_name Character. Fabric workspace display name GUID (ADLS filesystem/container name). lakehouse_name Character. Lakehouse item name, without .Lakehouse suffix (e.g. \"Lakehouse\" \"Lakehouse.Lakehouse\"). tenant_id Character. Entra ID (Azure AD) tenant GUID. Defaults Sys.getenv(\"FABRICQUERYR_TENANT_ID\") missing. client_id Character. App registration (client) ID. Defaults Sys.getenv(\"FABRICQUERYR_CLIENT_ID\"), falling back Azure CLI app id \"04b07795-8ddb-461a-bbee-02f9e1bf7b46\" set. dest_dir Character NULL. Local staging directory Parquet parts. NULL (default), temp dir used cleaned exit. verbose Logical. Print progress messages via {cli}. Default TRUE. dfs_base Character. OneLake DFS endpoint. Default \"https://onelake.dfs.fabric.microsoft.com\".","code":""},{"path":"https://lukakoning.github.io/fabricQueryR/reference/fabric_onelake_read_delta_table.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Read a Microsoft Fabric/OneLake Delta table (ADLS Gen2) — fabric_onelake_read_delta_table","text":"tibble table's current rows (0 rows table empty).","code":""},{"path":"https://lukakoning.github.io/fabricQueryR/reference/fabric_onelake_read_delta_table.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Read a Microsoft Fabric/OneLake Delta table (ADLS Gen2) — fabric_onelake_read_delta_table","text":"Microsoft Fabric, OneLake exposes workspace ADLS Gen2 filesystem. Within Lakehouse item, Delta tables stored Tables/<table> _delta_log/ directory tracks commit state. helper replays JSON commits avoid double-counting compacted/removed files. Ensure account/principal authenticate access via Lakehouse -> Manage OneLake data access (member workspace). AzureAuth used acquire token. wary caching behavior; may want call AzureAuth::clean_token_directory() clear cached tokens run issues","code":""},{"path":"https://lukakoning.github.io/fabricQueryR/reference/fabric_onelake_read_delta_table.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Read a Microsoft Fabric/OneLake Delta table (ADLS Gen2) — fabric_onelake_read_delta_table","text":"","code":"if (FALSE) { # \\dontrun{ df <- fabric_onelake_read_delta_table(   table_path     = \"Patients/PatientInfo\",   workspace_name = \"PatientsWorkspace\",   lakehouse_name = \"Lakehouse.Lakehouse\",   tenant_id      = Sys.getenv(\"FABRICQUERYR_TENANT_ID\"),   client_id      = Sys.getenv(\"FABRICQUERYR_CLIENT_ID\") ) dplyr::glimpse(df) } # }"},{"path":"https://lukakoning.github.io/fabricQueryR/reference/fabric_pbi_dax_query.html","id":null,"dir":"Reference","previous_headings":"","what":"Query a Microsoft Fabric/Power Bi semantic model with DAX — fabric_pbi_dax_query","title":"Query a Microsoft Fabric/Power Bi semantic model with DAX — fabric_pbi_dax_query","text":"High-level helper authenticates Azure AD, resolves workspace & dataset Power BI (Microsoft Fabric) XMLA/connection string, executes DAX statement via Power BI REST API, returns tibble resulting data.","code":""},{"path":"https://lukakoning.github.io/fabricQueryR/reference/fabric_pbi_dax_query.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Query a Microsoft Fabric/Power Bi semantic model with DAX — fabric_pbi_dax_query","text":"","code":"fabric_pbi_dax_query(   connstr,   dax,   tenant_id = Sys.getenv(\"FABRICQUERYR_TENANT_ID\"),   client_id = Sys.getenv(\"FABRICQUERYR_CLIENT_ID\", unset =     \"04b07795-8ddb-461a-bbee-02f9e1bf7b46\"),   include_nulls = TRUE,   api_base = \"https://api.powerbi.com/v1.0/myorg\" )"},{"path":"https://lukakoning.github.io/fabricQueryR/reference/fabric_pbi_dax_query.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Query a Microsoft Fabric/Power Bi semantic model with DAX — fabric_pbi_dax_query","text":"connstr Character. Power BI connection string, e.g. \"Data Source=powerbi://api.powerbi.com/v1.0/myorg/Workspace;Initial Catalog=Dataset;\". function accepts either Data Source= Initial Catalog= parts, bare powerbi://... data source plus Dataset=/Catalog=/Initial Catalog= key (see details). dax Character scalar valid DAX query (see example). tenant_id Microsoft Azure tenant ID. Defaults Sys.getenv(\"FABRICQUERYR_TENANT_ID\") missing. client_id Microsoft Azure application (client) ID used authenticate. Defaults Sys.getenv(\"FABRICQUERYR_CLIENT_ID\"). may able use Azure CLI app id \"04b07795-8ddb-461a-bbee-02f9e1bf7b46\", may want make app registration tenant better control. include_nulls Logical; pass-REST serializer setting. Defaults TRUE. TRUE, null values included response; FALSE, omitted. api_base API base URL. Defaults \"https://api.powerbi.com/v1.0/myorg\". 'myorg' appropriate use cases necessarily need changed.","code":""},{"path":"https://lukakoning.github.io/fabricQueryR/reference/fabric_pbi_dax_query.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Query a Microsoft Fabric/Power Bi semantic model with DAX — fabric_pbi_dax_query","text":"tibble query result (0 rows DAX query returned rows).","code":""},{"path":"https://lukakoning.github.io/fabricQueryR/reference/fabric_pbi_dax_query.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Query a Microsoft Fabric/Power Bi semantic model with DAX — fabric_pbi_dax_query","text":"Microsoft Fabric/Power BI, can find copy connection string going 'Semantic model' item, go 'File' -> 'Settings' -> 'Server settings'. Ensure account use authenticate access workspace, granted 'Build' permissions dataset (via sharing). AzureAuth used acquire token. wary caching behavior; may want call AzureAuth::clean_token_directory() clear cached tokens run issues","code":""},{"path":"https://lukakoning.github.io/fabricQueryR/reference/fabric_pbi_dax_query.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Query a Microsoft Fabric/Power Bi semantic model with DAX — fabric_pbi_dax_query","text":"","code":"if (FALSE) { # \\dontrun{ conn <- \"Data Source=powerbi://api.powerbi.com/v1.0/myorg/My Workspace;Initial Catalog=SalesModel;\" df <- fabric_pbi_dax_query(   connstr = conn,   dax = \"EVALUATE TOPN(1000, 'Customers')\",   tenant_id = Sys.getenv(\"FABRICQUERYR_TENANT_ID\"),   client_id = Sys.getenv(\"FABRICQUERYR_CLIENT_ID\") ) dplyr::glimpse(df) } # }"},{"path":"https://lukakoning.github.io/fabricQueryR/reference/fabric_sql_connect.html","id":null,"dir":"Reference","previous_headings":"","what":"Connect to a Microsoft Fabric SQL endpoint — fabric_sql_connect","title":"Connect to a Microsoft Fabric SQL endpoint — fabric_sql_connect","text":"Opens DBI/ODBC connection Microsoft Fabric Data Warehouse Lakehouse SQL endpoint, authenticating Azure AD (MSAL v2) passing access token ODBC driver.","code":""},{"path":"https://lukakoning.github.io/fabricQueryR/reference/fabric_sql_connect.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Connect to a Microsoft Fabric SQL endpoint — fabric_sql_connect","text":"","code":"fabric_sql_connect(   server,   database = \"Lakehouse\",   tenant_id = Sys.getenv(\"FABRICQUERYR_TENANT_ID\"),   client_id = Sys.getenv(\"FABRICQUERYR_CLIENT_ID\", unset =     \"04b07795-8ddb-461a-bbee-02f9e1bf7b46\"),   access_token = NULL,   odbc_driver = getOption(\"fabricqueryr.sql.driver\", \"ODBC Driver 18 for SQL Server\"),   port = 1433L,   encrypt = \"yes\",   trust_server_certificate = \"no\",   timeout = 30L,   verbose = TRUE,   ... )"},{"path":"https://lukakoning.github.io/fabricQueryR/reference/fabric_sql_connect.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Connect to a Microsoft Fabric SQL endpoint — fabric_sql_connect","text":"server Character. Microsoft Fabric SQL connection string Server=... string (see details). database Character. Database name. Defaults \"Lakehouse\". tenant_id Character. Entra ID (AAD) tenant GUID. Defaults Sys.getenv(\"FABRICQUERYR_TENANT_ID\"). client_id Character. App registration (client) ID. Defaults Sys.getenv(\"FABRICQUERYR_CLIENT_ID\"), falling back Azure CLI app id \"04b07795-8ddb-461a-bbee-02f9e1bf7b46\" unset. access_token Optional character. supplied, use bearer token instead acquiring new one via {AzureAuth}. odbc_driver Character. ODBC driver name. Defaults getOption(\"fabricqueryr.sql.driver\", \"ODBC Driver 18 SQL Server\"). port Integer. TCP port (default 1433). encrypt, trust_server_certificate Character flags passed ODBC. Defaults \"yes\" \"\", respectively. timeout Integer. Login/connect timeout seconds. Default 30. verbose Logical. Emit progress via {cli}. Default TRUE. ... Additional arguments forwarded DBI::dbConnect().","code":""},{"path":"https://lukakoning.github.io/fabricQueryR/reference/fabric_sql_connect.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Connect to a Microsoft Fabric SQL endpoint — fabric_sql_connect","text":"live DBIConnection object.","code":""},{"path":"https://lukakoning.github.io/fabricQueryR/reference/fabric_sql_connect.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Connect to a Microsoft Fabric SQL endpoint — fabric_sql_connect","text":"server Microsoft Fabric SQL connection string, e.g. \"xxxx.datawarehouse.fabric.microsoft.com\". can find going Lakehouse Data Warehouse item, Settings -> SQL analytics endpoint -> SQL connection string. may also pass DSN-less Server=... string; normalized. default request token https://database.windows.net/.default. AzureAuth used acquire token. wary caching behavior; may want call AzureAuth::clean_token_directory() clear cached tokens run issues","code":""},{"path":"https://lukakoning.github.io/fabricQueryR/reference/fabric_sql_connect.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Connect to a Microsoft Fabric SQL endpoint — fabric_sql_connect","text":"","code":"if (FALSE) { # \\dontrun{ con <- fabric_sql_connect(   server    = \"2gxz...qiy.datawarehouse.fabric.microsoft.com\",   database  = \"Lakehouse\",   tenant_id = Sys.getenv(\"FABRICQUERYR_TENANT_ID\"),   client_id = Sys.getenv(\"FABRICQUERYR_CLIENT_ID\") )  # List databases DBI::dbGetQuery(con, \"SELECT name FROM sys.databases\")  # List tables DBI::dbGetQuery(con, \"  SELECT TABLE_SCHEMA, TABLE_NAME  FROM INFORMATION_SCHEMA.TABLES  WHERE TABLE_TYPE = 'BASE TABLE' \")  # Get a table df <- DBI::dbReadTable(con, \"Customers\") dplyr::glimpse(df)  DBI::dbDisconnect(con) } # }"},{"path":"https://lukakoning.github.io/fabricQueryR/reference/fabric_sql_query.html","id":null,"dir":"Reference","previous_headings":"","what":"Run a SQL query against a Microsoft Fabric SQL endpoint (opening & closing connection) — fabric_sql_query","title":"Run a SQL query against a Microsoft Fabric SQL endpoint (opening & closing connection) — fabric_sql_query","text":"Convenience wrapper opens connection fabric_sql_connect(), executes sql, returns tibble. connection closed exit.","code":""},{"path":"https://lukakoning.github.io/fabricQueryR/reference/fabric_sql_query.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Run a SQL query against a Microsoft Fabric SQL endpoint (opening & closing connection) — fabric_sql_query","text":"","code":"fabric_sql_query(   server,   sql,   database = \"Lakehouse\",   tenant_id = Sys.getenv(\"FABRICQUERYR_TENANT_ID\"),   client_id = Sys.getenv(\"FABRICQUERYR_CLIENT_ID\", unset =     \"04b07795-8ddb-461a-bbee-02f9e1bf7b46\"),   access_token = NULL,   odbc_driver = getOption(\"fabricqueryr.sql.driver\", \"ODBC Driver 18 for SQL Server\"),   port = 1433L,   encrypt = \"yes\",   trust_server_certificate = \"no\",   timeout = 30L,   verbose = TRUE,   ... )"},{"path":"https://lukakoning.github.io/fabricQueryR/reference/fabric_sql_query.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Run a SQL query against a Microsoft Fabric SQL endpoint (opening & closing connection) — fabric_sql_query","text":"server Character. Microsoft Fabric SQL connection string Server=... string (see details). sql Character scalar. SQL run. database Character. Database name. Defaults \"Lakehouse\". tenant_id Character. Entra ID (AAD) tenant GUID. Defaults Sys.getenv(\"FABRICQUERYR_TENANT_ID\"). client_id Character. App registration (client) ID. Defaults Sys.getenv(\"FABRICQUERYR_CLIENT_ID\"), falling back Azure CLI app id \"04b07795-8ddb-461a-bbee-02f9e1bf7b46\" unset. access_token Optional character. supplied, use bearer token instead acquiring new one via {AzureAuth}. odbc_driver Character. ODBC driver name. Defaults getOption(\"fabricqueryr.sql.driver\", \"ODBC Driver 18 SQL Server\"). port Integer. TCP port (default 1433). encrypt, trust_server_certificate Character flags passed ODBC. Defaults \"yes\" \"\", respectively. timeout Integer. Login/connect timeout seconds. Default 30. verbose Logical. Emit progress via {cli}. Default TRUE. ... Additional arguments forwarded DBI::dbConnect().","code":""},{"path":"https://lukakoning.github.io/fabricQueryR/reference/fabric_sql_query.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Run a SQL query against a Microsoft Fabric SQL endpoint (opening & closing connection) — fabric_sql_query","text":"tibble query results (0 rows none).","code":""},{"path":"https://lukakoning.github.io/fabricQueryR/reference/fabric_sql_query.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Run a SQL query against a Microsoft Fabric SQL endpoint (opening & closing connection) — fabric_sql_query","text":"","code":"if (FALSE) { # \\dontrun{ df <- fabric_sql_query(   server    = \"2gxz...qiy.datawarehouse.fabric.microsoft.com\",   database  = \"Lakehouse\",   sql       = \"SELECT TOP 100 * FROM sys.objects\",   tenant_id = Sys.getenv(\"FABRICQUERYR_TENANT_ID\"),   client_id = Sys.getenv(\"FABRICQUERYR_CLIENT_ID\") ) dplyr::glimpse(df) } # }"},{"path":"https://lukakoning.github.io/fabricQueryR/news/index.html","id":"fabricqueryr-010","dir":"Changelog","previous_headings":"","what":"fabricQueryR 0.1.0","title":"fabricQueryR 0.1.0","text":"Initial CRAN submission.","code":""}]
