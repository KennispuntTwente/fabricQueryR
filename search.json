[{"path":"https://lukakoning.github.io/fabricQueryR/LICENSE.html","id":null,"dir":"","previous_headings":"","what":"MIT License","title":"MIT License","text":"Copyright (c) 2025 fabricQueryR authors Permission hereby granted, free charge, person obtaining copy software associated documentation files (“Software”), deal Software without restriction, including without limitation rights use, copy, modify, merge, publish, distribute, sublicense, /sell copies Software, permit persons Software furnished , subject following conditions: copyright notice permission notice shall included copies substantial portions Software. SOFTWARE PROVIDED “”, WITHOUT WARRANTY KIND, EXPRESS IMPLIED, INCLUDING LIMITED WARRANTIES MERCHANTABILITY, FITNESS PARTICULAR PURPOSE NONINFRINGEMENT. EVENT SHALL AUTHORS COPYRIGHT HOLDERS LIABLE CLAIM, DAMAGES LIABILITY, WHETHER ACTION CONTRACT, TORT OTHERWISE, ARISING , CONNECTION SOFTWARE USE DEALINGS SOFTWARE.","code":""},{"path":"https://lukakoning.github.io/fabricQueryR/authors.html","id":null,"dir":"","previous_headings":"","what":"Authors","title":"Authors and Citation","text":"Luka Koning. Author, maintainer.","code":""},{"path":"https://lukakoning.github.io/fabricQueryR/authors.html","id":"citation","dir":"","previous_headings":"","what":"Citation","title":"Authors and Citation","text":"Koning L (2025). fabricQueryR: Query Microsoft Fabric Data. R package version 0.0.0.9000, https://lukakoning.github.io/fabricQueryR/.","code":"@Manual{,   title = {fabricQueryR: Query Microsoft Fabric Data},   author = {Luka Koning},   year = {2025},   note = {R package version 0.0.0.9000},   url = {https://lukakoning.github.io/fabricQueryR/}, }"},{"path":"https://lukakoning.github.io/fabricQueryR/index.html","id":"fabricqueryr","dir":"","previous_headings":"","what":"Query Microsoft Fabric Data","title":"Query Microsoft Fabric Data","text":"‘fabricQueryR’ R package helps query data Microsoft Fabric R. comes three methods help get Microsoft Fabric data R: Create connection SQL endpoint (e.g., Lakehouse Data Warehouse item): fabric_sql_connect(). results ‘DBI’ connection object can execute SQL queries , /use ‘DBI’-compatible packages like ‘dbplyr’, ‘odbc’, et cetera. Execute DAX query Fabric/PowerBi Semantic Model item: fabric_pbi_dax_query(). , can run DAX queries Fabric/PowerBi dataset get results ‘tibble’ dataframe. Read Delta table Fabric Lakehouse item: fabric_onelake_read_delta_table(). function downloads underlying Parquet files Delta table stored OneLake (ADLS Gen2) returns data ‘tibble’ dataframe.","code":""},{"path":"https://lukakoning.github.io/fabricQueryR/index.html","id":"installation","dir":"","previous_headings":"","what":"Installation","title":"Query Microsoft Fabric Data","text":"can install development version ‘fabricQueryR’ like : release CRAN may follow later.","code":"if (!requireNamespace(\"remotes\", quietly = TRUE)) {   install.packages(\"remotes\") }  remotes::install_github(\"lukakoning/fabricQueryR\")"},{"path":"https://lukakoning.github.io/fabricQueryR/index.html","id":"usage","dir":"","previous_headings":"","what":"Usage","title":"Query Microsoft Fabric Data","text":"See function reference GitHub Pages site full documentation functions. code snippet showing use three main functions:","code":"# Sys.setenv(FABRICQUERYR_TENANT_ID = \"...\") # Sys.setenv(FABRICQUERYR_CLIENT_ID = \"...\")  # SQL connection ----------------------------------------------------------  # Get connection con <- fabric_sql_connect(   server = \"2gxzdezjoe4ethsnmm6grd4tya-v7qcb4ufxtxebbnrg2fuox4qiy.datawarehouse.fabric.microsoft.com\" )  # List databases DBI::dbGetQuery(con, \"SELECT name FROM sys.databases\")  # List tables in the current database DBI::dbGetQuery(   con,   \"   SELECT TABLE_SCHEMA, TABLE_NAME   FROM INFORMATION_SCHEMA.TABLES   WHERE TABLE_TYPE = 'BASE TABLE' \" )  # Read 'Customers' table df_sql <- DBI::dbReadTable(con, \"Customers\")  # Close connection DBI::dbDisconnect(con)   # OneLake table -----------------------------------------------------------  df_onelake <- fabric_onelake_read_delta_table(   table_path = \"Customers\",   workspace_name = \"ExampleWorkspace\",   lakehouse_name = \"Lakehouse.Lakehouse\", )   # DAX query ---------------------------------------------------------------  df_dax <- fabric_pbi_dax_query(   connstr = \"Data Source=powerbi://api.powerbi.com/v1.0/myorg/ExampleWorkspace;Initial Catalog=test data 1;\",   dax = \"EVALUATE TOPN(100000, 'Sheet1')\" )"},{"path":"https://lukakoning.github.io/fabricQueryR/index.html","id":"background","dir":"","previous_headings":"","what":"Background","title":"Query Microsoft Fabric Data","text":"Microsoft Fabric new data platform Microsoft combines various data services, including data warehousing, data lakes, business intelligence. built top Azure Data Services integrates Power BI analytics reporting. Microsoft actively promoting Fabric next-generation data platform organizations using Microsoft Azure Power BI. organization started exploring Microsoft Fabric, found loading data R Fabric yet straightforward, took effort get working. help others situation, decided share functions created make easier.","code":""},{"path":"https://lukakoning.github.io/fabricQueryR/reference/fabricQueryR-package.html","id":null,"dir":"Reference","previous_headings":"","what":"fabricQueryR: Query Microsoft Fabric Data — fabricQueryR-package","title":"fabricQueryR: Query Microsoft Fabric Data — fabricQueryR-package","text":"Query data hosted 'Microsoft Fabric'. Provides helpers () open 'DBI' connections SQL endpoints 'Lakehouse' 'Data Warehouse' items, (ii) submit DAX queries 'Microsoft Fabric'/'Power BI' semantic models, (iii) read 'Delta' tables stored 'OneLake' ('Azure Data Lake Storage Gen2').","code":""},{"path":[]},{"path":"https://lukakoning.github.io/fabricQueryR/reference/fabricQueryR-package.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"fabricQueryR: Query Microsoft Fabric Data — fabricQueryR-package","text":"Maintainer: Luka Koning l.koning@kennispunttwente.nl","code":""},{"path":"https://lukakoning.github.io/fabricQueryR/reference/fabric_onelake_read_delta_table.html","id":null,"dir":"Reference","previous_headings":"","what":"Read a Fabric/OneLake Delta table (ADLS Gen2) — fabric_onelake_read_delta_table","title":"Read a Fabric/OneLake Delta table (ADLS Gen2) — fabric_onelake_read_delta_table","text":"Authenticates OneLake (ADLS Gen2), resolves table's _delta_log determine current active Parquet parts, downloads parts local staging directory, returns result tibble.","code":""},{"path":"https://lukakoning.github.io/fabricQueryR/reference/fabric_onelake_read_delta_table.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Read a Fabric/OneLake Delta table (ADLS Gen2) — fabric_onelake_read_delta_table","text":"","code":"fabric_onelake_read_delta_table(   table_path,   workspace_name,   lakehouse_name,   tenant_id = Sys.getenv(\"FABRICQUERYR_TENANT_ID\"),   client_id = Sys.getenv(\"FABRICQUERYR_CLIENT_ID\", unset =     \"04b07795-8ddb-461a-bbee-02f9e1bf7b46\"),   dest_dir = NULL,   verbose = TRUE,   dfs_base = \"https://onelake.dfs.fabric.microsoft.com\" )"},{"path":"https://lukakoning.github.io/fabricQueryR/reference/fabric_onelake_read_delta_table.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Read a Fabric/OneLake Delta table (ADLS Gen2) — fabric_onelake_read_delta_table","text":"table_path Character. Table name nested path (e.g. \"Patienten\" \"Patienten/patienten_hash\"). last path segment used table directory Tables/. workspace_name Character. Fabric workspace display name GUID (ADLS filesystem/container name). lakehouse_name Character. Lakehouse item name, without .Lakehouse suffix (e.g. \"Lakehouse\" \"Lakehouse.Lakehouse\"). tenant_id Character. Entra ID (Azure AD) tenant GUID. Defaults Sys.getenv(\"FABRICQUERYR_TENANT_ID\") missing. client_id Character. App registration (client) ID. Defaults Sys.getenv(\"FABRICQUERYR_CLIENT_ID\"), falling back Azure CLI app id \"04b07795-8ddb-461a-bbee-02f9e1bf7b46\" set. dest_dir Character NULL. Local staging directory Parquet parts. NULL (default), temp dir used cleaned exit. verbose Logical. Print progress messages via {cli}. Default TRUE. dfs_base Character. OneLake DFS endpoint. Default \"https://onelake.dfs.fabric.microsoft.com\".","code":""},{"path":"https://lukakoning.github.io/fabricQueryR/reference/fabric_onelake_read_delta_table.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Read a Fabric/OneLake Delta table (ADLS Gen2) — fabric_onelake_read_delta_table","text":"tibble table’s current rows (0 rows table empty).","code":""},{"path":"https://lukakoning.github.io/fabricQueryR/reference/fabric_onelake_read_delta_table.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Read a Fabric/OneLake Delta table (ADLS Gen2) — fabric_onelake_read_delta_table","text":"Microsoft Fabric, OneLake exposes workspace ADLS Gen2 filesystem. Within Lakehouse item, Delta tables stored Tables/<table> _delta_log/ directory tracks commit state. helper replays JSON commits avoid double-counting compacted/removed files. Ensure app/service principal authenticate access via Lakehouse → Manage OneLake data access (member workspace).","code":""},{"path":"https://lukakoning.github.io/fabricQueryR/reference/fabric_onelake_read_delta_table.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Read a Fabric/OneLake Delta table (ADLS Gen2) — fabric_onelake_read_delta_table","text":"","code":"if (FALSE) { # \\dontrun{ df <- fabric_onelake_read_delta(   table_path     = \"Patients/PatientInfo\",   workspace_name = \"PatientsWorkspace\",   lakehouse_name = \"Lakehouse.Lakehouse\",   tenant_id      = Sys.getenv(\"FABRICQUERYR_TENANT_ID\"),   client_id      = Sys.getenv(\"FABRICQUERYR_CLIENT_ID\") ) dplyr::glimpse(df) } # }"},{"path":"https://lukakoning.github.io/fabricQueryR/reference/fabric_pbi_dax_query.html","id":null,"dir":"Reference","previous_headings":"","what":"Query a Power BI / Fabric semantic model with DAX — fabric_pbi_dax_query","title":"Query a Power BI / Fabric semantic model with DAX — fabric_pbi_dax_query","text":"High-level helper authenticates Azure AD, resolves workspace & dataset Power BI (Fabric) XMLA/connection string, executes DAX statement via Power BI (Fabric) REST API, returns tibble resulting data.","code":""},{"path":"https://lukakoning.github.io/fabricQueryR/reference/fabric_pbi_dax_query.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Query a Power BI / Fabric semantic model with DAX — fabric_pbi_dax_query","text":"","code":"fabric_pbi_dax_query(   connstr,   dax,   tenant_id = Sys.getenv(\"FABRICQUERYR_TENANT_ID\"),   client_id = Sys.getenv(\"FABRICQUERYR_CLIENT_ID\", unset =     \"04b07795-8ddb-461a-bbee-02f9e1bf7b46\"),   include_nulls = TRUE,   api_base = \"https://api.powerbi.com/v1.0/myorg\" )"},{"path":"https://lukakoning.github.io/fabricQueryR/reference/fabric_pbi_dax_query.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Query a Power BI / Fabric semantic model with DAX — fabric_pbi_dax_query","text":"connstr Character. Power BI connection string, e.g. \"Data Source=powerbi://api.powerbi.com/v1.0/myorg/Workspace;Initial Catalog=Dataset;\". function accepts either Data Source= Initial Catalog= parts, bare powerbi://... data source plus Dataset=/Catalog=/Initial Catalog= key. (See details.) dax Character scalar valid DAX query. (See example.) tenant_id Microsoft Azure tenant ID. Defaults Sys.getenv(\"FABRICQUERYR_TENANT_ID\") missing. client_id Microsoft Azure application (client) ID used authenticate. Defaults Sys.getenv(\"FABRICQUERYR_CLIENT_ID\"). may able use Azure CLI app id \"04b07795-8ddb-461a-bbee-02f9e1bf7b46\", may want make app registration tenant better control. include_nulls Logical; pass-REST serializer setting. Defaults TRUE. TRUE, null values included response; FALSE, omitted. api_base API base URL. Defaults \"https://api.powerbi.com/v1.0/myorg\". 'myorg' appropriate use cases necessarily need changed.","code":""},{"path":"https://lukakoning.github.io/fabricQueryR/reference/fabric_pbi_dax_query.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Query a Power BI / Fabric semantic model with DAX — fabric_pbi_dax_query","text":"tibble query result (0 rows DAX query returned rows).","code":""},{"path":"https://lukakoning.github.io/fabricQueryR/reference/fabric_pbi_dax_query.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Query a Power BI / Fabric semantic model with DAX — fabric_pbi_dax_query","text":"Fabric/PowerBi, can find copy connection string going 'Semantic model' item, go 'File' -> 'Settings' -> 'Server settings'. Ensure account use authenticate access workspace, granted 'Build' permissions dataset (via sharing).","code":""},{"path":"https://lukakoning.github.io/fabricQueryR/reference/fabric_pbi_dax_query.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Query a Power BI / Fabric semantic model with DAX — fabric_pbi_dax_query","text":"","code":"if (FALSE) { # \\dontrun{ conn <- \"Data Source=powerbi://api.powerbi.com/v1.0/myorg/My Workspace;Initial Catalog=SalesModel;\" df <- pbi_dax_query(   connstr = conn,   dax = \"EVALUATE TOPN(1000, 'Customers')\",   tenant_id = Sys.getenv(\"FABRICQUERYR_TENANT_ID\"),   client_id = Sys.getenv(\"FABRICQUERYR_CLIENT_ID\") ) dplyr::glimpse(df) } # }"},{"path":"https://lukakoning.github.io/fabricQueryR/reference/fabric_sql_connect.html","id":null,"dir":"Reference","previous_headings":"","what":"Connect to a Microsoft Fabric SQL endpoit — fabric_sql_connect","title":"Connect to a Microsoft Fabric SQL endpoit — fabric_sql_connect","text":"Opens DBI/ODBC connection Fabric Data Warehouse Lakehouse SQL endpoint, authenticating Azure AD (MSAL v2) passing access token ODBC driver.","code":""},{"path":"https://lukakoning.github.io/fabricQueryR/reference/fabric_sql_connect.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Connect to a Microsoft Fabric SQL endpoit — fabric_sql_connect","text":"","code":"fabric_sql_connect(   server,   database = \"Lakehouse\",   tenant_id = Sys.getenv(\"FABRICQUERYR_TENANT_ID\"),   client_id = Sys.getenv(\"FABRICQUERYR_CLIENT_ID\", unset =     \"04b07795-8ddb-461a-bbee-02f9e1bf7b46\"),   access_token = NULL,   odbc_driver = getOption(\"fabricqueryr.sql.driver\", \"ODBC Driver 18 for SQL Server\"),   port = 1433L,   encrypt = \"yes\",   trust_server_certificate = \"no\",   timeout = 30L,   verbose = TRUE,   ... )"},{"path":"https://lukakoning.github.io/fabricQueryR/reference/fabric_sql_connect.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Connect to a Microsoft Fabric SQL endpoit — fabric_sql_connect","text":"server Character. Fabric SQL server host Server=... string. database Character. Database name. Defaults \"Lakehouse\". tenant_id Character. Entra ID (AAD) tenant GUID. Defaults Sys.getenv(\"FABRICQUERYR_TENANT_ID\"). client_id Character. App registration (client) ID. Defaults Sys.getenv(\"FABRICQUERYR_CLIENT_ID\"), falling back Azure CLI app id \"04b07795-8ddb-461a-bbee-02f9e1bf7b46\" unset. access_token Optional character. supplied, use bearer token instead acquiring new one via {AzureAuth}. odbc_driver Character. ODBC driver name. Defaults getOption(\"fabricqueryr.sql.driver\", \"ODBC Driver 18 SQL Server\"). port Integer. TCP port (default 1433). encrypt, trust_server_certificate Character flags passed ODBC. Defaults \"yes\" \"\", respectively. timeout Integer. Login/connect timeout seconds. Default 30. verbose Logical. Emit progress via {cli}. Default TRUE. ... Additional arguments forwarded DBI::dbConnect().","code":""},{"path":"https://lukakoning.github.io/fabricQueryR/reference/fabric_sql_connect.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Connect to a Microsoft Fabric SQL endpoit — fabric_sql_connect","text":"live DBIConnection.","code":""},{"path":"https://lukakoning.github.io/fabricQueryR/reference/fabric_sql_connect.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Connect to a Microsoft Fabric SQL endpoit — fabric_sql_connect","text":"Set permissions app/service principal Fabric. server Fabric SQL host, e.g. \"xxxx.datawarehouse.fabric.microsoft.com\". may also pass DSN-less Server=... value; normalized. default request token https://database.windows.net/.default.","code":""},{"path":"https://lukakoning.github.io/fabricQueryR/reference/fabric_sql_connect.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Connect to a Microsoft Fabric SQL endpoit — fabric_sql_connect","text":"","code":"if (FALSE) { # \\dontrun{ con <- fabric_sql_connect(   server    = \"2gxz...qiy.datawarehouse.fabric.microsoft.com\",   database  = \"Lakehouse\",   tenant_id = Sys.getenv(\"FABRICQUERYR_TENANT_ID\"),   client_id = Sys.getenv(\"FABRICQUERYR_CLIENT_ID\") ) DBI::dbGetQuery(con, \"SELECT name FROM sys.databases\") DBI::dbDisconnect(con) } # }"},{"path":"https://lukakoning.github.io/fabricQueryR/reference/fabric_sql_query.html","id":null,"dir":"Reference","previous_headings":"","what":"Run a SQL query against a Fabric SQL endpoint (open/close automatically) — fabric_sql_query","title":"Run a SQL query against a Fabric SQL endpoint (open/close automatically) — fabric_sql_query","text":"Convenience wrapper opens connection fabric_sql_connect(), executes sql, returns tibble. connection closed exit.","code":""},{"path":"https://lukakoning.github.io/fabricQueryR/reference/fabric_sql_query.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Run a SQL query against a Fabric SQL endpoint (open/close automatically) — fabric_sql_query","text":"","code":"fabric_sql_query(   server,   sql,   database = \"Lakehouse\",   tenant_id = Sys.getenv(\"FABRICQUERYR_TENANT_ID\"),   client_id = Sys.getenv(\"FABRICQUERYR_CLIENT_ID\", unset =     \"04b07795-8ddb-461a-bbee-02f9e1bf7b46\"),   access_token = NULL,   odbc_driver = getOption(\"fabricqueryr.sql.driver\", \"ODBC Driver 18 for SQL Server\"),   port = 1433L,   encrypt = \"yes\",   trust_server_certificate = \"no\",   timeout = 30L,   verbose = TRUE,   ... )"},{"path":"https://lukakoning.github.io/fabricQueryR/reference/fabric_sql_query.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Run a SQL query against a Fabric SQL endpoint (open/close automatically) — fabric_sql_query","text":"server Character. Fabric SQL server host Server=... string. sql Character scalar. SQL run. database Character. Database name. Defaults \"Lakehouse\". tenant_id Character. Entra ID (AAD) tenant GUID. Defaults Sys.getenv(\"FABRICQUERYR_TENANT_ID\"). client_id Character. App registration (client) ID. Defaults Sys.getenv(\"FABRICQUERYR_CLIENT_ID\"), falling back Azure CLI app id \"04b07795-8ddb-461a-bbee-02f9e1bf7b46\" unset. access_token Optional character. supplied, use bearer token instead acquiring new one via {AzureAuth}. odbc_driver Character. ODBC driver name. Defaults getOption(\"fabricqueryr.sql.driver\", \"ODBC Driver 18 SQL Server\"). port Integer. TCP port (default 1433). encrypt, trust_server_certificate Character flags passed ODBC. Defaults \"yes\" \"\", respectively. timeout Integer. Login/connect timeout seconds. Default 30. verbose Logical. Emit progress via {cli}. Default TRUE. ... Additional arguments forwarded DBI::dbConnect().","code":""},{"path":"https://lukakoning.github.io/fabricQueryR/reference/fabric_sql_query.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Run a SQL query against a Fabric SQL endpoint (open/close automatically) — fabric_sql_query","text":"tibble query results (0 rows none).","code":""},{"path":"https://lukakoning.github.io/fabricQueryR/reference/fabric_sql_query.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Run a SQL query against a Fabric SQL endpoint (open/close automatically) — fabric_sql_query","text":"","code":"if (FALSE) { # \\dontrun{ df <- fabric_sql_query(   server    = \"2gxz...qiy.datawarehouse.fabric.microsoft.com\",   database  = \"Lakehouse\",   sql       = \"SELECT TOP 100 * FROM sys.objects\",   tenant_id = Sys.getenv(\"FABRICQUERYR_TENANT_ID\"),   client_id = Sys.getenv(\"FABRICQUERYR_CLIENT_ID\") ) dplyr::glimpse(df) } # }"},{"path":"https://lukakoning.github.io/fabricQueryR/reference/parse_pbi_connstr.html","id":null,"dir":"Reference","previous_headings":"","what":"Parse a Power BI connection string (XMLA) into components — parse_pbi_connstr","title":"Parse a Power BI connection string (XMLA) into components — parse_pbi_connstr","text":"Parse Power BI connection string (XMLA) components","code":""},{"path":"https://lukakoning.github.io/fabricQueryR/reference/parse_pbi_connstr.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Parse a Power BI connection string (XMLA) into components — parse_pbi_connstr","text":"","code":"parse_pbi_connstr(conn)"},{"path":"https://lukakoning.github.io/fabricQueryR/reference/parse_pbi_connstr.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Parse a Power BI connection string (XMLA) into components — parse_pbi_connstr","text":"conn Character; Power BI connection string.","code":""},{"path":"https://lukakoning.github.io/fabricQueryR/reference/parse_pbi_connstr.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Parse a Power BI connection string (XMLA) into components — parse_pbi_connstr","text":"list elements server, workspace, dataset.","code":""},{"path":"https://lukakoning.github.io/fabricQueryR/reference/pbi_execute_dax.html","id":null,"dir":"Reference","previous_headings":"","what":"Execute a DAX query against a dataset — pbi_execute_dax","title":"Execute a DAX query against a dataset — pbi_execute_dax","text":"Execute DAX query dataset","code":""},{"path":"https://lukakoning.github.io/fabricQueryR/reference/pbi_execute_dax.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Execute a DAX query against a dataset — pbi_execute_dax","text":"","code":"pbi_execute_dax(   access_token,   dataset_id,   dax,   group_id = NULL,   include_nulls = TRUE,   api_base = \"https://api.powerbi.com/v1.0/myorg\" )"},{"path":"https://lukakoning.github.io/fabricQueryR/reference/pbi_execute_dax.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Execute a DAX query against a dataset — pbi_execute_dax","text":"access_token OAuth2 bearer token. dataset_id Dataset GUID. dax DAX query. group_id Optional workspace (group) GUID. supplied, request made group-scoped endpoint. include_nulls Logical; whether include NULLs response serialization. api_base API base URL.","code":""},{"path":"https://lukakoning.github.io/fabricQueryR/reference/pbi_execute_dax.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Execute a DAX query against a dataset — pbi_execute_dax","text":"tibble.","code":""},{"path":"https://lukakoning.github.io/fabricQueryR/reference/pbi_get_token.html","id":null,"dir":"Reference","previous_headings":"","what":"Get a Power BI access token using AzureAuth — pbi_get_token","title":"Get a Power BI access token using AzureAuth — pbi_get_token","text":"Get Power BI access token using AzureAuth","code":""},{"path":"https://lukakoning.github.io/fabricQueryR/reference/pbi_get_token.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Get a Power BI access token using AzureAuth — pbi_get_token","text":"","code":"pbi_get_token(tenant_id, client_id)"},{"path":"https://lukakoning.github.io/fabricQueryR/reference/pbi_get_token.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Get a Power BI access token using AzureAuth — pbi_get_token","text":"tenant_id Azure AD tenant GUID. client_id Azure AD application (client) ID.","code":""},{"path":"https://lukakoning.github.io/fabricQueryR/reference/pbi_get_token.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Get a Power BI access token using AzureAuth — pbi_get_token","text":"bearer access token string suitable Authorization: Bearer ....","code":""},{"path":"https://lukakoning.github.io/fabricQueryR/reference/pbi_resolve_ids_from_connstr.html","id":null,"dir":"Reference","previous_headings":"","what":"Resolve workspace & dataset GUIDs using the Power BI REST API — pbi_resolve_ids_from_connstr","title":"Resolve workspace & dataset GUIDs using the Power BI REST API — pbi_resolve_ids_from_connstr","text":"Resolve workspace & dataset GUIDs using Power BI REST API","code":""},{"path":"https://lukakoning.github.io/fabricQueryR/reference/pbi_resolve_ids_from_connstr.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Resolve workspace & dataset GUIDs using the Power BI REST API — pbi_resolve_ids_from_connstr","text":"","code":"pbi_resolve_ids_from_connstr(   connstr,   access_token,   api_base = \"https://api.powerbi.com/v1.0/myorg\" )"},{"path":"https://lukakoning.github.io/fabricQueryR/reference/pbi_resolve_ids_from_connstr.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Resolve workspace & dataset GUIDs using the Power BI REST API — pbi_resolve_ids_from_connstr","text":"connstr Connection string used infer workspace & dataset names. access_token OAuth2 bearer token Power BI API. api_base API base URL. Defaults \"https://api.powerbi.com/v1.0/myorg\".","code":""},{"path":"https://lukakoning.github.io/fabricQueryR/reference/pbi_resolve_ids_from_connstr.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Resolve workspace & dataset GUIDs using the Power BI REST API — pbi_resolve_ids_from_connstr","text":"list group_id, dataset_id, workspace, dataset.","code":""}]
