% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/fabric_livy.R
\name{fabric_livy_run}
\alias{fabric_livy_run}
\title{Run a Livy API query (Spark code) in Microsoft Fabric}
\usage{
fabric_livy_run(
  livy_url,
  code,
  kind = c("spark", "pyspark", "sparkr", "sql"),
  tenant_id = Sys.getenv("FABRICQUERYR_TENANT_ID"),
  client_id = Sys.getenv("FABRICQUERYR_CLIENT_ID", unset =
    "04b07795-8ddb-461a-bbee-02f9e1bf7b46"),
  access_token = NULL,
  environment_id = NULL,
  conf = NULL,
  verbose = TRUE,
  poll_interval = 2L,
  timeout = 600L
)
}
\arguments{
\item{livy_url}{Character. Livy session job connection string, e.g.
\code{"https://api.fabric.microsoft.com/v1/workspaces/.../lakehouses/.../livyapi/versions/2023-12-01/sessions"}
(see details).}

\item{code}{Character. Code to run in the Livy session.}

\item{kind}{Character. One of \code{"spark"}, \code{"pyspark"}, \code{"sparkr"}, or \code{"sql"}.
Indicates the type of Spark code being submitted for evaluation.}

\item{tenant_id}{Microsoft Azure tenant ID. Defaults to \code{Sys.getenv("FABRICQUERYR_TENANT_ID")} if missing.}

\item{client_id}{Microsoft Azure application (client) ID used to authenticate. Defaults to
\code{Sys.getenv("FABRICQUERYR_CLIENT_ID")}. You may be able to use the Azure CLI app id
\code{"04b07795-8ddb-461a-bbee-02f9e1bf7b46"}, but may want to make your own
app registration in your tenant for better control.}

\item{access_token}{Optional character. If supplied, use this bearer token
instead of acquiring a new one via \code{{AzureAuth}}.}

\item{environment_id}{Optional character. Fabric Environment (pool) ID to use
for the session. If \code{NULL} (default), the default environment for the user
will be used.}

\item{conf}{Optional list. Spark configuration settings to apply to the session.}

\item{verbose}{Logical. Emit progress via \code{{cli}}. Default \code{TRUE}.}

\item{poll_interval}{Integer. Polling interval in seconds when waiting for session/statement readiness.}

\item{timeout}{Integer. Timeout in seconds when waiting for session/statement readiness.}
}
\value{
A list with statement details and results. The list contains:
\itemize{
\item \code{id}: Statement ID.
\item \code{state}: Final statement state (should be \code{"available"}).
\item \code{started_local}: Local timestamp when statement started running.
\item \code{completed_local}: Local timestamp when statement completed.
\item \code{duration_sec}: Duration in seconds (local).
\item \code{output}: A list with raw output details:#'
\itemize{
\item \code{status}: Output status (e.g., \code{"ok"}).
\item \code{execution_count}: Execution count (if applicable). The number of
statements that have been executed in the session.
\item \code{data}: Raw data list with MIME types as keys (e.g.
\code{"text/plain"}, \code{"application/json"}).
\item \code{parsed}: Parsed output, if possible. This may be a data frame (tibble)
if the output was JSON tabular data, or a character vector if it was
plain text. May be \code{NULL} if parsing was not possible.
}
\item \code{url}: URL of the statement resource in the Livy API.
}
}
\description{
High-level helper that creates a Livy session in Microsoft Fabric, waits for
it to become idle, submits a statement with Spark code for execution, retrieves
the result, and closes the session.
}
\details{
\itemize{
\item In Microsoft Fabric, you can find and copy the Livy session URL by going
to a 'Lakehouse' item, then go to 'Settings' -> 'Livy Endpoint' -> 'Session job connection string'.
\item By default we request a token for \verb{https://api.fabric.microsoft.com/.default}.
\item \pkg{AzureAuth} is used to acquire the token. Be wary of
caching behavior; you may want to call \code{\link[AzureAuth:get_azure_token]{AzureAuth::clean_token_directory()}}
to clear cached tokens if you run into issues
}
}
\examples{
# Example is not executed since it requires configured credentials for Fabric
\dontrun{
sess_url <-
res <- fabric_livy_run(
 livy_url = "https://api.fabric.microsoft.com/v1/workspaces/...",
 kind = "sparkr",
 code = "print(1+2)",
 tenant_id = Sys.getenv("FABRICQUERYR_TENANT_ID"),
 client_id = Sys.getenv("FABRICQUERYR_CLIENT_ID")
)
print(res$output$parsed) # "3" (text/plain)
}
}
\seealso{
\href{https://learn.microsoft.com/en-us/fabric/data-engineering/api-livy-overview}{Livy API overview - Microsoft Fabric - 'What is the Livy API for Data Engineering?'};
\href{https://livy.apache.org/docs/latest/rest-api.html}{Livy Docs - REST API}.
}
